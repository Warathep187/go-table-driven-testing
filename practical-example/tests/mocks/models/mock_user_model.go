// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "practical-example/models"

	mock "github.com/stretchr/testify/mock"
)

// MockUserModel is an autogenerated mock type for the UserModelInterface type
type MockUserModel struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: username
func (_m *MockUserModel) CreateUser(username string) (*models.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *MockUserModel) GetUserByUsername(username string) (*models.User, bool) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*models.User, bool)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewMockUserModel creates a new instance of MockUserModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserModel {
	mock := &MockUserModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
